import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Product } from '../shared/database/mongo/schema/product.schema';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';

@Injectable()
export class ProductsService {
    
  constructor(
    @InjectModel(Product.name) private productModel: Model<Product>
) {}

async create(name: string, price: number) {
    const newProduct = new this.productModel({ name, price });
    return newProduct.save();
  }

  async findAll(search?: string, page: number = 1, limit: number = 10) {
    const query: any = {};

    // ðŸ”Ž TÃ¬m kiáº¿m theo tÃªn sáº£n pháº©m
    if (search) {
      query.name = { $regex: search, $options: 'i' }; 
    }

    // ðŸ“‘ TÃ­nh toÃ¡n phÃ¢n trang
    const skip = (page - 1) * limit;

    // Láº¥y danh sÃ¡ch sáº£n pháº©m
    const products = await this.productModel
      .find(query)
      .skip(skip)
      .limit(limit);

    // Tá»•ng sá»‘ sáº£n pháº©m khá»›p query
    const total = await this.productModel.countDocuments(query);

    return {
      total,           // tá»•ng sá»‘ báº£n ghi
      page,            // trang hiá»‡n táº¡i
      limit,           // sá»‘ báº£n ghi má»—i trang
      totalPages: Math.ceil(total / limit),
      products,        // danh sÃ¡ch sáº£n pháº©m
    };
  }
async update(id: string, updateProductDto: UpdateProductDto) {
    return this.productModel.findByIdAndUpdate(id, updateProductDto, { new: true });
  }

  async remove(id: string) {
    return this.productModel.findByIdAndDelete(id);
  }  
}
